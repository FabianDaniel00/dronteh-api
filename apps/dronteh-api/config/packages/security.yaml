security:
  enable_authenticator_manager: true
  role_hierarchy:
    ROLE_SUPER_ADMIN: ROLE_ADMIN
    ROLE_ADMIN: ROLE_USER
  # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
  password_hashers:
    Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: "auto"
    App\Entity\User:
      algorithm: bcrypt

  # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
  providers:
    # used to reload user from session & other features (e.g. switch_user)
    app_user_provider:
      entity:
        class: App\Entity\User
        property: email
  firewalls:
    dev:
      pattern: ^/(_(profiler|wdt)|css|images|js)/
      security: false

    login:
      pattern: ^/api/login
      stateless: true
      provider: app_user_provider
      user_checker: App\Security\UserChecker
      json_login:
        check_path: api_login_check
        success_handler: lexik_jwt_authentication.handler.authentication_success
        failure_handler: lexik_jwt_authentication.handler.authentication_failure

    api_token_refresh:
      pattern: ^/api/token/refresh
      stateless: true
      refresh_jwt: ~
      user_checker: App\Security\UserChecker

    api:
      pattern: ^/api
      stateless: true
      provider: app_user_provider
      user_checker: App\Security\UserChecker
      jwt: ~

    admin:
      pattern: ^/(%app.supported_locales%)/admin
      provider: app_user_provider
      custom_authenticator: App\Security\AdminAuthenticator
      user_checker: App\Security\UserChecker
      logout:
        path: admin_logout
        # where to redirect after logout
        target: admin_login
      remember_me:
        secret: '%kernel.secret%' # required
        lifetime: 604800 # 1 week in seconds

    # activate different ways to authenticate
    # https://symfony.com/doc/current/security.html#the-firewall

    # https://symfony.com/doc/current/security/impersonating_user.html
    # switch_user: true

  # Easy way to control access for large sections of your site
  # Note: Only the *first* access control that matches will be used
  access_control:
    - { path: ^/api/users/ask_another_user_verification_email, roles: PUBLIC_ACCESS, methods: [GET] }
    - { path: ^/api/users, roles: PUBLIC_ACCESS, methods: [POST] }
    - { path: ^/api/users, roles: IS_AUTHENTICATED_FULLY, methods: [GET, PATCH, DELETE] }
    - { path: ^/api/login, roles: PUBLIC_ACCESS, methods: [POST] }
    - { path: ^/api/contacts, roles: PUBLIC_ACCESS, methods: [POST] }
    - { path: ^/api/get_csrf_token, roles: PUBLIC_ACCESS, methods: [GET] }
    - { path: ^/api/token/refresh, roles: IS_AUTHENTICATED_FULLY, methods: [GET] }
    - { path: ^/api/me, roles: IS_AUTHENTICATED_FULLY, methods: [GET] }
    - { path: ^/api/reservations/(\d+)/send_notification, allow_if: "is_fully_authenticated() and is_granted('ROLE_ADMIN') and is_granted('ROLE_SUPER_ADMIN')", methods: [POST] }
    - { path: ^/api/reservations, roles: IS_AUTHENTICATED_FULLY, methods: [GET, POST, PATCH, DELETE] }
    - { path: ^/api/ratings, roles: IS_AUTHENTICATED_FULLY, methods: [POST] }
    - { path: ^/api/ratings, roles: PUBLIC_ACCESS, methods: [GET] }
    - { path: ^/api/plants, roles: PUBLIC_ACCESS, methods: [GET] }
    - { path: ^/api/drone_data_per_reservations, roles: IS_AUTHENTICATED_FULLY, methods: [GET] }
    - { path: ^/api/chemicals, roles: PUBLIC_ACCESS, methods: [GET] }
    - { path: ^/api/area_of_use_chemicals/chemicals, roles: IS_AUTHENTICATED_FULLY, methods: [GET] }
    - { path: ^/api, allow_if: "is_fully_authenticated() and is_granted('ROLE_ADMIN') and is_granted('ROLE_SUPER_ADMIN')" }

    - { path: ^/(%app.supported_locales%)/admin/login, roles: PUBLIC_ACCESS, methods: [GET, POST] }
    - { path: ^/(%app.supported_locales%)/admin, allow_if: "is_fully_authenticated() and is_granted('ROLE_ADMIN') and is_granted('ROLE_SUPER_ADMIN')" }
